# -*- coding: utf-8 -*-
"""Аналитика по метрикам.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1chLEoXGLPVRo8uFVkAt9U21Z7HN6SHrC
"""

import json
import os
import matplotlib.pyplot as plt
import seaborn as sns

# Функция для чтения JSON-файла и извлечения метрик
def read_metrics(file_path):
    with open(file_path, 'r') as file:
        data = json.load(file)
    return data['metrics']

def draw_hists(metric_names, json_files):
    # Определяем количество строк и столбцов для сетки графиков
    n_files = len(json_files)
    n_cols = 2  # Количество столбцов в сетке
    n_rows = (n_files + n_cols - 1) // n_cols  # Вычисляем количество строк

    # Создаем подграфики
    fig, axes = plt.subplots(n_rows, n_cols, figsize=(15, 5 * n_rows))


    # Извлекаем метрики и строим графики
    for i, json_file in enumerate(json_files):
        metrics = read_metrics(json_file)
        metric_values = [metrics[key] for key in metric_names]

        # Выбираем подграфик
        ax = axes[i // n_cols, i % n_cols]

        # Построение гистограммы метрик
        sns.barplot(x=metric_names, y=metric_values, ax=ax)
        ax.set_xticklabels(metric_names, rotation=90)
        ax.set_title(f'Metrics for {json_file}')
        ax.set_xlabel('Metric Names')
        ax.set_ylabel('Metric Values')

    # Удаляем пустые подграфики, если есть
    for j in range(i + 1, n_rows * n_cols):
        fig.delaxes(axes[j // n_cols, j % n_cols])

    plt.tight_layout()
    plt.show()

def draw_line_plots(metric_names, json_files):
    all_metrics = { name: [] for name in metric_names}

    # Извлекаем метрики из каждого файла и добавляем их в словарь
    for json_file in json_files:
        metrics = read_metrics(json_file)
        for key in all_metrics.keys():
            all_metrics[key].append(metrics.get(key, None))  # Если ключа нет, добавляем None

    # Создаем подграфики для каждой метрики
    n_metrics = len(all_metrics)
    fig, axes = plt.subplots(n_metrics, 1, figsize=(12, 4 * n_metrics))

    # Построение линейных графиков для каждой метрики
    for i, (metric, values) in enumerate(all_metrics.items()):
        ax = axes[i]
        ax.plot(json_files, values, marker='o')
        ax.set_title(metric)
        ax.set_xlabel('JSON Files')
        ax.set_ylabel('Values')
        ax.grid(True)
        ax.set_xticks(range(len(json_files)))
        ax.set_xticklabels([os.path.basename(file) for file in json_files], rotation=45)

    plt.tight_layout()
    plt.show()

def draw_all_metrics_line_plot(metric_names, json_files):
    all_metrics = { name: [] for name in metric_names}
    for json_file in json_files:
        metrics = read_metrics(json_file)
        for key in all_metrics.keys():
            all_metrics[key].append(metrics.get(key, None))
    for metric, values in all_metrics.items():
        plt.plot(json_files, values, marker='o', label=metric)


    plt.title('Metrics Across Different JSON Files')
    plt.xlabel('JSON Files')
    plt.ylabel('Metric Values')
    plt.grid(True)
    plt.xticks(range(len(json_files)), [os.path.basename(file) for file in json_files], rotation=45)
    plt.legend(fontsize=12, loc='upper left', bbox_to_anchor=(-0.1, 1))
    plt.tight_layout()
    plt.show()

# Список файлов JSON
json_files = ['obj_approximation_2.0.json', 'obj_approximation_5.0.json', 'obj_approximation_8.0.json',
              'obj_approximation_10.0.json', 'obj_approximation_15.0.json', 'obj_approximation_18.0.json', 'obj_approximation_20.0.json']

# Список названий метрик и их значений
metric_names = ['ACCURACY', 'ADJUST RAND', 'AUC', 'COHEN KAPPA', 'DICE', 'FALLOUT', 'GCOERROR', 'JACCARD', 'PRECISION', 'RAND INDEX', 'SENSITIVITY', 'SPECIFICITY']

draw_hists(metric_names, json_files)

draw_line_plots(metric_names, json_files)

draw_all_metrics_line_plot(metric_names, json_files)

dilation_json_files = ['erosion_2.0.json', 'erosion_5.0.json', 'erosion_8.0.json',
              'erosion_10.0.json', 'erosion_15.0.json', 'erosion_18.0.json', 'erosion_20.0.json']

draw_hists(metric_names, dilation_json_files)

draw_line_plots(metric_names, dilation_json_files)

draw_all_metrics_line_plot(metric_names, json_files)

import matplotlib.pyplot as plt
import os

def draw_all_metrics_line_plot(metric_names, json_files):
    all_metrics = {name: [] for name in metric_names}
    for json_file in json_files:
        metrics = read_metrics(json_file)  # Предполагается, что функция read_metrics уже определена
        for key in all_metrics.keys():
            all_metrics[key].append(metrics.get(key, None))

    plt.figure(figsize=(12, 8))  # Установка размера фигуры

    for metric, values in all_metrics.items():
        plt.plot(json_files, values, marker='o', label=metric)

    plt.title('Metrics Across Different JSON Files')
    plt.xlabel('JSON Files')
    plt.ylabel('Metric Values')
    plt.grid(True)
    plt.xticks(range(len(json_files)), [os.path.basename(file) for file in json_files], rotation=45)
    plt.legend(fontsize=12, loc='upper left', bbox_to_anchor=(-0.1, 1))
    plt.tight_layout()
    plt.show()

files = ['erosion_5.0.json', 'dilation_5.0.json', 'obj_approximation_5.0.json', 'obj_localization_5.0.json', 'bndry_localization_5.0.json']


# Список названий метрик и их значений
metric_names = ['ACCURACY', 'ADJUST RAND', 'AUC', 'COHEN KAPPA', 'DICE', 'FALLOUT', 'GCOERROR', 'JACCARD', 'PRECISION', 'RAND INDEX', 'SENSITIVITY', 'SPECIFICITY']

import json
import matplotlib.pyplot as plt

def plot_metrics_from_json(json_files, metric_names):
    metrics = {metric: [] for metric in metric_names}

    # Чтение метрик из JSON файлов
    for json_file in json_files:
        with open(json_file) as f:
            data = json.load(f)
            for metric, value in data["metrics"].items():
                if metric in metric_names:
                    metrics[metric].append(value)

    # Построение графиков
    plt.figure(figsize=(18, 10))  # Установка размера фигуры
    for metric, values in metrics.items():
        plt.plot(values, label=metric)

    plt.xlabel("Файл")  # Установка подписи оси x
    plt.ylabel("Значение метрики")
    plt.title("Графики метрик")
    plt.xticks(range(len(files)), files, rotation=45, ha="right")  # Установка меток на оси x
    plt.legend()
    plt.tight_layout()  # Автоматическое размещение графика для избежания перекрытий
    plt.show()

# Пример вызова функции с указанием файлов JSON и списка метрик

metric_names = ['JACCARD', 'PRECISION', 'RAND INDEX', 'SENSITIVITY', 'SPECIFICITY']
plot_metrics_from_json(files, metric_names)

